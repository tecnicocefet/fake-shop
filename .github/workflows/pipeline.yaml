name: CI/CD Pipeline for Fake Shop

on:
  push:
    branches:
      - main  # Ou o nome da sua branch principal

jobs:
  # Job CI - Build e Push da imagem Docker
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/fake-shop:$GITHUB_SHA"
          docker build -t $IMAGE_TAG ./src  # Ajuste aqui para a pasta src
          docker tag $IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/fake-shop:latest
          docker push $IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/fake-shop:latest

  # Job CD - Deploy no Kubernetes
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.24.0'

      - name: Set up Kubeconfig
        run: |
          echo -e "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Debug Kubeconfig
        run: |
          cat kubeconfig.yaml

      - name: List Kubernetes contexts
        run: |
          kubectl config get-contexts

      - name: Set Kubernetes context
        run: |
          kubectl config use-context do-nyc1-k8s-devops

      - name: Test cluster connection
        run: |
          kubectl get nodes

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f Kubernetes/deployment.yaml
          kubectl apply -f Kubernetes/service.yaml

      - name: Wait for Deployment to be ready
        run: |
          kubectl rollout status deployment/fake-shop-deployment

      - name: Verify deployment
        run: |
          kubectl get pods -l app=fake-shop
          kubectl describe pod $(kubectl get pods -l app=fake-shop -o jsonpath='{.items[0].metadata.name}')